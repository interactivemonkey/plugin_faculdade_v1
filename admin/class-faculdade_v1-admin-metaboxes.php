<?php

/**
 * The metabox-specific functionality of the plugin.
 *
 * @link       interactivemoney.com.br
 * @since      1.0.0
 *
 * @package    Faculdade_v1
 * @subpackage Faculdade_v1/admin
 */
/**
 * The metabox-specific functionality of the plugin.
 *
 * @package    Faculdade_v1
 * @subpackage Faculdade_v1/admin
 * @author     Interactive MOnkey <atendimento@interactivemonkey.com.br>
 */
class Faculdade_Admin_Metaboxes {
	/**
	 * The post meta data
	 *
	 * @since 		1.0.0
	 * @access 		private
	 * @var 		string 			$meta    			The post meta data.
	 */
	private $meta;
	/**
	 * The ID of this plugin.
	 *
	 * @since 		1.0.0
	 * @access 		private
	 * @var 		string 			$plugin_name 		The ID of this plugin.
	 */
	private $plugin_name;
	/**
	 * The version of this plugin.
	 *
	 * @since 		1.0.0
	 * @access 		private
	 * @var 		string 			$version 			The current version of this plugin.
	 */
	private $version;
	/**
	 * Initialize the class and set its properties.
	 *
	 * @since 		1.0.0
	 * @param 		string 			$Now_Hiring 		The name of this plugin.
	 * @param 		string 			$version 			The version of this plugin.
	 */
	public function __construct( $plugin_name, $version ) {
		$this->plugin_name = $plugin_name;
		$this->version = $version;
		$this->set_meta();
	}

	/**
	 * Registers metaboxes with WordPress
	 *
	 * @since 	1.0.0
	 * @access 	public
	 */
	public function add_metaboxes() {
		// add_meta_box( $id, $title, $callback, $screen, $context, $priority, $callback_args );
		add_meta_box(
			'faculdade_v1_endereco_aluno',
			apply_filters( $this->plugin_name . '-metabox-title-endereco-aluno', esc_html__( 'Informações de cadastro do aluno', 'faculdade_v1' ) ),
			array( $this, 'metabox' ),
			'inscricao',
			'normal',
			'default',
			array(
				'file' => 'info-aluno'
			)
		);

		add_meta_box(
			'faculdade_v1_pagamento',
			apply_filters( $this->plugin_name . '-metabox-title-pagamento', esc_html__( 'Pagamento', 'faculdade_v1' ) ),
			array( $this, 'metabox' ),
			'inscricao',
			'side',
			'high',
			//'true',
			array(
				'file' => 'pagamento'
			)
		);

		add_meta_box(
			'faculdade_v1_academico',
			apply_filters( $this->plugin_name . '-metabox-title-academico', esc_html__( 'Informações sobre o Evento/Curso', 'faculdade_v1' ) ),
			array( $this, 'metabox' ),
			'inscricao',
			'normal',
			'default',
			//'true',
			array(
				'file' => 'academico'
			)
		);

/*
		add_meta_box(
			'now_hiring_job_requirements',
			apply_filters( $this->plugin_name . '-metabox-title-requirements', esc_html__( 'Job Requirements', 'faculdade_v1' ) ),
			array( $this, 'metabox' ),
			'inscricao',
			'normal',
			'default',
			array(
				'file' => 'job-requirements'
			)
		);

		add_meta_box(
			'now_hiring_job_files',
			apply_filters( $this->plugin_name . '-metabox-title-requirements', esc_html__( 'Related Files', 'faculdade_v1' ) ),
			array( $this, 'metabox' ),
			'inscricao',
			'side',
			'low',
			array(
				'file' => 'job-files',
				'classes' => 'equal'
			)
		);
*/

	} // add_metaboxes()


	 /**
	 * Generated by the WordPress Meta Box generator
	 * at http://jeremyhixon.com/tool/wordpress-meta-box-generator/


	function informaes_save( $post_id ) {
		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) return;
		if ( ! isset( $_POST['informaes_nonce'] ) || ! wp_verify_nonce( $_POST['informaes_nonce'], '_informaes_nonce' ) ) return;
		if ( ! current_user_can( 'edit_post', $post_id ) ) return;

		if ( isset( $_POST['informaes_nome_complero'] ) )
			update_post_meta( $post_id, 'informaes_nome_complero', esc_attr( $_POST['informaes_nome_complero'] ) );
		if ( isset( $_POST['informaes_cpf'] ) )
			update_post_meta( $post_id, 'informaes_cpf', esc_attr( $_POST['informaes_cpf'] ) );
	}
	add_action( 'save_post', 'informaes_save' );
*/

/*
	Usage: informaes_get_meta( 'informaes_nome_complero' )
	Usage: informaes_get_meta( 'informaes_cpf' )
*/



	/**
	 * Check each nonce. If any don't verify, $nonce_check is increased.
	 * If all nonces verify, returns 0.
	 *
	 * @since 		1.0.0
	 * @access 		public
	 * @return 		int 		The value of $nonce_check
	 */
	private function check_nonces( $posted ) {
		$nonces 		= array();
		$nonce_check 	= 0;
		$nonces[] 		= 'inscricao_academico';
		$nonces[] 		= 'endereco_aluno';
		$nonces[] 		= 'pagamento_files';
		foreach ( $nonces as $nonce ) {
			if ( ! isset( $posted[$nonce] ) ) { $nonce_check++; }
			if ( isset( $posted[$nonce] ) && ! wp_verify_nonce( $posted[$nonce], $this->plugin_name ) ) { $nonce_check++; }
		}
		return $nonce_check;
	} // check_nonces()
	/**
	 * Returns an array of the all the metabox fields and their respective types
	 *
	 * @since 		1.0.0
	 * @access 		public
	 * @return 		array 		Metabox fields and types
	 */
	private function get_metabox_fields() {
		$fields = array();
		$fields[] = array( 'nome-aluno', 'text' );
		$fields[] = array( 'data-nasc', 'date' );
		$fields[] = array( 'email-alun', 'text' );
		$fields[] = array( 'cpf-alun', 'text' );
		$fields[] = array( 'rg-alun', 'text' );
	       $fields[] = array( 'ender-aluno', 'text' );
		$fields[] = array( 'end-numero', 'text' );
		$fields[] = array( 'end-bairro', 'text' );
		$fields[] = array( 'end-cidade', 'text' );
		$fields[] = array( 'end-estado', 'text' );
		$fields[] = array( 'end-cep', 'text' );
		$fields[] = array( 'tel-fixo', 'text' );
		$fields[] = array( 'celular-aluno', 'text' );
		$fields[] = array( 'evento-inscri', 'text' );
		$fields[] = array( 'institu-estudou', 'text' );
		$fields[] = array( 'primeira-opcao', 'text' );
		$fields[] = array( 'segunda-opcao', 'text' );
		$fields[] = array( 'lingua-estrangeira', 'text' );
		$fields[] = array( 'select-necessidade-espec', 'select' ); //'inscricao_seleo' ) === 'carro' ) ? 'selected' :
		$fields[] = array( 'filiacao', 'text' );
		$fields[] = array( 'expedicao', 'text' );
		$fields[] = array( 'indicacao', 'text' );
		$fields[] = array( 'select-pagamento', 'select' );
		//$fields[] = array( 'file-repeater', 'repeater', array( array( 'label-file', 'text' ), array( 'url-file', 'url' ) ) );
		return $fields;
	} // get_metabox_fields()



	/**
	 * Calls a metabox file specified in the add_meta_box args.
	 *
	 * @since 	1.0.0
	 * @access 	public
	 * @return 	void
	 */
	public function metabox( $post, $params ) {
		if ( ! is_admin() ) { return; }

		if ( 'inscricao' !== $post->post_type ) { return; }

		// if ( ! empty( $params['args']['classes'] ) ) {
		//	$classes = 'repeater ' . $params['args']['classes'];
		// }

		include( plugin_dir_path( __FILE__ ) . 'partials/faculdade_v1-admin-metabox-' . $params['args']['file'] . '.php' );
	} // metabox()

	private function sanitizer( $type, $data ) {
		if ( empty( $type ) ) { return; }
		if ( empty( $data ) ) { return; }
		$return 	= '';
		$sanitizer 	= new Faculdade_v1_Sanitize();
		$sanitizer->set_data( $data );
		$sanitizer->set_type( $type );
		$return = $sanitizer->clean();
		unset( $sanitizer );
		return $return;
	} // sanitizer()
	/**
	 * Saves button order when buttons are sorted.
	 */


	public function save_files_order() {
		check_ajax_referer( 'faculdade-v1-file-order-nonce', 'fileordernonce' );
		$order 						= $this->meta['file-order'];
		$new_order 					= implode( ',', $_POST['file-order'] );
		$this->meta['file-order'] 	= $new_order;
		$update 					= update_post_meta( 'file-order', $new_order );
		esc_html_e( 'File order saved.', 'faculdade_v1' );
		die();
	} // save_files_order()
	/**
	 * Sets the class variable $options
	 */
	public function set_meta() {
		global $post;
		if ( empty( $post ) ) { return; }
		if ( 'inscricao' != $post->post_type ) { return; }
		//wp_die( '<pre>' . print_r( $post->ID ) . '</pre>' );
		$this->meta = get_post_custom( $post->ID );
	} // set_meta()
	/**
	 * Saves metabox data
	 *
	 * Repeater section works like this:
	 *  	Loops through meta fields
	 *  		Loops through submitted data
	 *  		Sanitizes each field into $clean array
	 *   	Gets max of $clean to use in FOR loop
	 *   	FOR loops through $clean, adding each value to $new_value as an array
	 *
	 * @since 	1.0.0
	 * @access 	public
	 * @param 	int 		$post_id 		The post ID
	 * @param 	object 		$object 		The post object
	 * @return 	void
	 */
	public function validate_meta( $post_id, $object ) {

		//wp_die( '<pre>' . print_r( $_POST ) . '</pre>' );
		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) { return $post_id; }

		if ( ! current_user_can( 'edit_post', $post_id ) ) { return $post_id; }

		if ( 'inscricao' !== $object->post_type ) { return $post_id; }

		$nonce_check = $this->check_nonces( $_POST );

		if ( 0 < $nonce_check ) { return $post_id; }

		$metas = $this->get_metabox_fields();

		foreach ( $metas as $meta ) {
			$name = $meta[0];
			$type = $meta[1];
			if ( 'repeater' === $type && is_array( $meta[2] ) ) {
				$clean = array();
				foreach ( $meta[2] as $field ) {
					foreach ( $_POST[$field[0]] as $data ) {
						if ( empty( $data ) ) { continue; }
						$clean[$field[0]][] = $this->sanitizer( $field[1], $data );
					} // foreach
				} // foreach
				$count 		= faculdade_v1_get_max( $clean );
				$new_value 	= array();
				for ( $i = 0; $i < $count; $i++ ) {
					foreach ( $clean as $field_name => $field ) {
						$new_value[$i][$field_name] = $field[$i];
					} // foreach $clean
				} // for
			} else {
				$new_value = $this->sanitizer( $type, $_POST[$name] );
			}

			update_post_meta( $post_id, $name, $new_value );
		} // foreach


	} // validate_meta()

} // class

/*
function informaes_save( $post_id ) {
		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) return;
		if ( ! isset( $_POST['informaes_nonce'] ) || ! wp_verify_nonce( $_POST['informaes_nonce'], '_informaes_nonce' ) ) return;
		if ( ! current_user_can( 'edit_post', $post_id ) ) return;

		if ( isset( $_POST['informaes_nome_complero'] ) )
			update_post_meta( $post_id, 'informaes_nome_complero', esc_attr( $_POST['informaes_nome_complero'] ) );
		if ( isset( $_POST['informaes_cpf'] ) )
			update_post_meta( $post_id, 'informaes_cpf', esc_attr( $_POST['informaes_cpf'] ) );
	}
	add_action( 'save_post', 'informaes_save' );

*/